{"ast":null,"code":"import React,{useState}from'react';import{Paper,Typography,TextField,Button,FormControl,InputLabel,Select,MenuItem,Box}from'@mui/material';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ConfigForm=_ref=>{let{config,onConfigUpdate}=_ref;const[swapAmount,setSwapAmount]=useState(config?config.swapAmountLamports/1000000000:0.01);const[tradeMode,setTradeMode]=useState((config===null||config===void 0?void 0:config.tradeMode)||'random');const[concurrencyLimit,setConcurrencyLimit]=useState((config===null||config===void 0?void 0:config.concurrencyLimit)||3);const[newTokenSymbol,setNewTokenSymbol]=useState('');const[newTokenMint,setNewTokenMint]=useState('');const handleSubmit=e=>{e.preventDefault();const updatedConfig={swapAmountLamports:swapAmount*1000000000,tradeMode:tradeMode,concurrencyLimit};if(newTokenSymbol&&newTokenMint){updatedConfig.tokenList=[...((config===null||config===void 0?void 0:config.tokenList)||[]),{symbol:newTokenSymbol,mint:newTokenMint}];setNewTokenSymbol('');setNewTokenMint('');}onConfigUpdate(updatedConfig);};return/*#__PURE__*/_jsxs(Paper,{sx:{p:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"Trading Configuration\"}),/*#__PURE__*/_jsxs(Box,{component:\"form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(TextField,{label:\"Swap Amount (SOL)\",type:\"number\",value:swapAmount,onChange:e=>setSwapAmount(parseFloat(e.target.value)),fullWidth:true,margin:\"normal\",inputProps:{step:'0.01'}}),/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,margin:\"normal\",children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Trade Mode\"}),/*#__PURE__*/_jsxs(Select,{value:tradeMode,onChange:e=>setTradeMode(e.target.value),children:[/*#__PURE__*/_jsx(MenuItem,{value:\"random\",children:\"Random\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"buyOnly\",children:\"Buy Only\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"sellOnly\",children:\"Sell Only\"})]})]}),/*#__PURE__*/_jsx(TextField,{label:\"Concurrency Limit\",type:\"number\",value:concurrencyLimit,onChange:e=>setConcurrencyLimit(parseInt(e.target.value)),fullWidth:true,margin:\"normal\"}),/*#__PURE__*/_jsx(TextField,{label:\"New Token Symbol\",value:newTokenSymbol,onChange:e=>setNewTokenSymbol(e.target.value),fullWidth:true,margin:\"normal\"}),/*#__PURE__*/_jsx(TextField,{label:\"New Token Mint\",value:newTokenMint,onChange:e=>setNewTokenMint(e.target.value),fullWidth:true,margin:\"normal\"}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"contained\",sx:{mt:2},children:\"Update Config\"})]})]});};export default ConfigForm;","map":{"version":3,"names":["React","useState","Paper","Typography","TextField","Button","FormControl","InputLabel","Select","MenuItem","Box","jsx","_jsx","jsxs","_jsxs","ConfigForm","_ref","config","onConfigUpdate","swapAmount","setSwapAmount","swapAmountLamports","tradeMode","setTradeMode","concurrencyLimit","setConcurrencyLimit","newTokenSymbol","setNewTokenSymbol","newTokenMint","setNewTokenMint","handleSubmit","e","preventDefault","updatedConfig","tokenList","symbol","mint","sx","p","children","variant","gutterBottom","component","onSubmit","label","type","value","onChange","parseFloat","target","fullWidth","margin","inputProps","step","parseInt","mt"],"sources":["/root/solana-trading-bot/frontend/src/components/ConfigForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n} from '@mui/material';\r\n\r\ninterface Config {\r\n  swapAmountLamports: number;\r\n  tokenList: { symbol: string; mint: string }[];\r\n  tradeMode: 'random' | 'buyOnly' | 'sellOnly';\r\n  concurrencyLimit: number;\r\n}\r\n\r\ninterface ConfigFormProps {\r\n  config: Config | null;\r\n  onConfigUpdate: (newConfig: Partial<Config>) => void;\r\n}\r\n\r\nconst ConfigForm: React.FC<ConfigFormProps> = ({ config, onConfigUpdate }) => {\r\n  const [swapAmount, setSwapAmount] = useState(\r\n    config ? config.swapAmountLamports / 1_000_000_000 : 0.01\r\n  );\r\n  const [tradeMode, setTradeMode] = useState(config?.tradeMode || 'random');\r\n  const [concurrencyLimit, setConcurrencyLimit] = useState(\r\n    config?.concurrencyLimit || 3\r\n  );\r\n  const [newTokenSymbol, setNewTokenSymbol] = useState('');\r\n  const [newTokenMint, setNewTokenMint] = useState('');\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const updatedConfig: Partial<Config> = {\r\n      swapAmountLamports: swapAmount * 1_000_000_000,\r\n      tradeMode: tradeMode as 'random' | 'buyOnly' | 'sellOnly',\r\n      concurrencyLimit,\r\n    };\r\n    if (newTokenSymbol && newTokenMint) {\r\n      updatedConfig.tokenList = [\r\n        ...(config?.tokenList || []),\r\n        { symbol: newTokenSymbol, mint: newTokenMint },\r\n      ];\r\n      setNewTokenSymbol('');\r\n      setNewTokenMint('');\r\n    }\r\n    onConfigUpdate(updatedConfig);\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Trading Configuration\r\n      </Typography>\r\n      <Box component=\"form\" onSubmit={handleSubmit}>\r\n        <TextField\r\n          label=\"Swap Amount (SOL)\"\r\n          type=\"number\"\r\n          value={swapAmount}\r\n          onChange={(e) => setSwapAmount(parseFloat(e.target.value))}\r\n          fullWidth\r\n          margin=\"normal\"\r\n          inputProps={{ step: '0.01' }}\r\n        />\r\n        <FormControl fullWidth margin=\"normal\">\r\n          <InputLabel>Trade Mode</InputLabel>\r\n          <Select\r\n            value={tradeMode}\r\n            onChange={(e) =>\r\n              setTradeMode(e.target.value as 'random' | 'buyOnly' | 'sellOnly')\r\n            }\r\n          >\r\n            <MenuItem value=\"random\">Random</MenuItem>\r\n            <MenuItem value=\"buyOnly\">Buy Only</MenuItem>\r\n            <MenuItem value=\"sellOnly\">Sell Only</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <TextField\r\n          label=\"Concurrency Limit\"\r\n          type=\"number\"\r\n          value={concurrencyLimit}\r\n          onChange={(e) => setConcurrencyLimit(parseInt(e.target.value))}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <TextField\r\n          label=\"New Token Symbol\"\r\n          value={newTokenSymbol}\r\n          onChange={(e) => setNewTokenSymbol(e.target.value)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <TextField\r\n          label=\"New Token Mint\"\r\n          value={newTokenMint}\r\n          onChange={(e) => setNewTokenMint(e.target.value)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" sx={{ mt: 2 }}>\r\n          Update Config\r\n        </Button>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ConfigForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}